# Sample Logstash configuration for creating a simple
# kafka -> Logstash -> Elasticsearch pipeline.

#  输入源部分
input {
    kafka{
#       增加输入类型字段
        add_field => {"inputType" => "增加输入类型字段"}
#        Kafka 集群配置
        bootstrap_servers => ""
#        监听topics
        topics => "监听topics"
#        解码成json
        codec => json {
             charset => "UTF-8"
         }
    }
    kafka{
#       增加输入类型字段
        add_field => {"inputType" => "增加输入类型字段"}
#        Kafka 集群配置
        bootstrap_servers => ""
#        监听topics
        topics => "监听topics"
#        解码成json
        codec => json {
             charset => "UTF-8"
         }
    }
}
# 清洗部分
filter {
#    输入的类型判断 输入类型是  数据库名是  表名中存在  不是DDL语句
    if [inputType] == "增加输入类型字段" and  [database] == "" and "" in [table] and ![isDdl] {
#        对于批量操作解析
         split {
#          拆分哪个是arrayJson数组
           field => "data"
#           移除多余的字段
           remove_field => ["mysqlType","sqlType","pkNames","sql","isDdl","old","es","ts","id","@version","message"]
         }
#         增加临时字段
         mutate {
            add_field => { "dataTemp" => "%{data}" }
          }
#         字符串json格式化
         json {
             source => "dataTemp"
             add_field => {"x_sendDate" => "%{table}"}
#            移除多余的字段
             remove_field => [ "data","dataTemp" ]
         }
#         增加yyyyMMdd字段
         mutate {
            gsub => ["x_sendDate", "tbsendrcd_", ""]
          }
    }
#    输入的类型判断 输入类型是  数据库名是  表名中存在  不是DDL语句
    if [inputType] == "" and  [database] == "" and "" in [table]  and ![isDdl] {
#        对于批量操作解析
         split {
#          拆分哪个是arrayJson数组
           field => "data"
#           移除多余的字段
           remove_field => ["mysqlType","sqlType","pkNames","sql","isDdl","old","es","ts","id","@version","message"]
         }
#         增加临时字段
         mutate {
            add_field => { "dataTemp" => "%{data}" }
          }
#         字符串json格式化
         json {
             source => "dataTemp"
             add_field => {"x_sendDate" => "%{table}"}
#            移除多余的字段
             remove_field => [ "data","dataTemp" ]
         }
#         增加yyyyMMdd字段
         mutate {
            gsub => ["x_sendDate", "tbsendrcd_", ""]
            convert => {
                "x_sendDate" => "integer"
               }
          }
    }
}

output {
#        stdout { codec => rubydebug }
#    输入的类型判断 输入类型是  数据库名是  表名中存在  不是DDL语句  不等于 空   不等于空
    if [inputType] == "" and  [database] == "" and "" in [table] and ![isDdl] and [x_sendDate] != "" and [smsId] != "" {
    #   控制台输出
        stdout { codec => rubydebug }
#      数据库操作类型
        if [type] == "INSERT" {
#         ES新增数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{smsId}"
            hosts => ["http://119.91.232.58:9200"]
            index => "%{table}"
            user => ""
            password => ""
          }
        }
#      数据库操作类型
      if [type] == "UPDATE" {
#         ES更新数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{smsId}"
            hosts => ["http://119.91.232.58:9200"]
            index => "%{table}"
            user => ""
            password => ""
            doc_as_upsert => true
            manage_template => true
            action => "update"
          }
        }
#      数据库操作类型
        if [type] == "DELETE" {
#         ES删除数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{smsId}"
            action => "delete"
            hosts => ["http://119.91.232.58:9200"]
            index => "%{table}"
            user => ""
            password => ""
          }
        }
    }
#    输入的类型判断 输入类型是  数据库名是  表名中存在  不是DDL语句  x_sendDate 不等于 空  voice_id 不等于空
    if [inputType] == "" and  [database] == "" and "" in [table] and ![isDdl] and [x_sendDate] != "" and [voice_id] != "" {
    #   控制台输出
        stdout { codec => rubydebug }
#      数据库操作类型 是插入
        if [type] == "INSERT" {
#         ES新增数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{voice_id}"
            hosts => []
            index => "%{table}"
            user => ""
            password => ""
          }
        }
#      数据库操作类型 是更新
      if [type] == "UPDATE" {
#         ES更新数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{voice_id}"
            hosts => []
            index => "%{table}"
            user => ""
            password => ""
            doc_as_upsert => true
            manage_template => true
            action => "update"
          }
        }
#      数据库操作类型 是删除
        if [type] == "DELETE" {
#         ES删除数据的配置信息
          elasticsearch {
            routing => "%{x_sendDate}"
            document_id => "%{voice_id}"
            action => "delete"
            hosts => []
            index => "%{table}"
            user => ""
            password => ""
          }
        }
    }

}
